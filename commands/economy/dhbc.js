const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const axios = require('axios');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('dhbc')
        .setDescription('Ch∆°i tr√≤ ƒêu·ªïi H√¨nh B·∫Øt Ch·ªØ!'),

    async execute(interaction) {
        await interaction.deferReply();

        try {
            const apiUrl = 'https://subhatde.id.vn/game/dhbcv3';
            const response = await axios.get(apiUrl);
            const data = response.data.data;

            if (!data || !data.emoji1 || !data.emoji2 || !data.firstword) {
                return interaction.editReply('‚ùå API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá!');
            }

            const correctAnswer = data.wordcomplete.trim().toLowerCase();
            const questionEmbed = new EmbedBuilder()
                .setColor('Blue')
                .setTitle('üîç ƒêu·ªïi H√¨nh B·∫Øt Ch·ªØ!')
                .setDescription(`üß© **G·ª£i √Ω:** ${data.emoji1} + ${data.emoji2}`)
                .setFooter({ text: 'Tr·∫£ l·ªùi tin nh·∫Øn n√†y ƒë·ªÉ ƒëo√°n t·ª´!' });

            const gameMessage = await interaction.editReply({ embeds: [questionEmbed] });

            // T·∫°o collector ƒë·ªÉ thu th·∫≠p c√¢u tr·∫£ l·ªùi t·ª´ ng∆∞·ªùi ch∆°i
            const filter = msg => msg.author.id === interaction.user.id;
            const collector = interaction.channel.createMessageCollector({ filter, time: 30000 });

            collector.on('collect', async msg => {
                const userAnswer = msg.content.trim().toLowerCase();

                if (userAnswer === correctAnswer) {
                    collector.stop(); // D·ª´ng collector khi tr·∫£ l·ªùi ƒë√∫ng

                    // L·∫•y c√¢u ƒë·ªë m·ªõi t·ª´ API
                    const newResponse = await axios.get(apiUrl);
                    const newData = newResponse.data.data;
                    const newCorrectAnswer = newData.wordcomplete.trim().toLowerCase();

                    const newEmbed = new EmbedBuilder()
                        .setColor('Green')
                        .setTitle('‚úÖ Ch√≠nh x√°c! Ti·∫øp t·ª•c c√¢u ƒë·ªë m·ªõi:')
                        .setDescription(`üß© **G·ª£i √Ω:** ${newData.emoji1} + ${newData.emoji2}`)
                        .setFooter({ text: 'Tr·∫£ l·ªùi tin nh·∫Øn n√†y ƒë·ªÉ ti·∫øp t·ª•c ch∆°i!' });

                    gameMessage.edit({ embeds: [newEmbed] });

                    // C·∫≠p nh·∫≠t c√¢u h·ªèi m·ªõi cho collector
                    collector.resetTimer();
                } else {
                    msg.reply('‚ùå Sai r·ªìi! Th·ª≠ l·∫°i n√†o.');
                }
            });

            collector.on('end', collected => {
                if (collected.size === 0) {
                    interaction.editReply({ content: '‚è≥ **B·∫°n ƒë√£ h·∫øt th·ªùi gian!** Tr√≤ ch∆°i k·∫øt th√∫c.', embeds: [] });
                }
            });

        } catch (error) {
            console.error(error);
            await interaction.editReply('‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y c√¢u ƒë·ªë t·ª´ API!');
        }
    }
};

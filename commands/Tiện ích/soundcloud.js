const { SlashCommandBuilder, EmbedBuilder, AttachmentBuilder } = require('discord.js');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('soundcloud')
        .setDescription('T√¨m ki·∫øm ho·∫∑c t·∫£i b√†i h√°t t·ª´ SoundCloud')
        .addSubcommand(subcommand =>
            subcommand
                .setName('search')
                .setDescription('T√¨m ki·∫øm b√†i h√°t tr√™n SoundCloud')
                .addStringOption(option =>
                    option.setName('query')
                        .setDescription('Nh·∫≠p t√™n b√†i h√°t b·∫°n mu·ªën t√¨m')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('download')
                .setDescription('T·∫£i b√†i h√°t t·ª´ SoundCloud')
                .addStringOption(option =>
                    option.setName('url')
                        .setDescription('Nh·∫≠p URL b√†i h√°t t·ª´ SoundCloud')
                        .setRequired(true))),
    
    async execute(interaction) {
        await interaction.deferReply();
        const subcommand = interaction.options.getSubcommand();

        if (subcommand === 'search') {
            const query = interaction.options.getString('query');
            const searchApiUrl = `https://api.zetsu.xyz/api/scsearch?q=${encodeURIComponent(query)}`;

            try {
                const searchResponse = await axios.get(searchApiUrl);
                if (!searchResponse.data || !searchResponse.data.result || searchResponse.data.result.length === 0) {
                    return interaction.editReply('üö´ Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o!');
                }

                // L·∫•y danh s√°ch t·ªëi ƒëa 5 b√†i h√°t
                const songs = searchResponse.data.result.slice(0, 5);

                // T·∫°o Embed danh s√°ch b√†i h√°t
                const embed = new EmbedBuilder()
                    .setColor('#ff5500')
                    .setTitle(`üîé K·∫øt qu·∫£ t√¨m ki·∫øm: "${query}"`)
                    .setDescription(songs.map((song, index) => `**${index + 1}.** [${song.title}](${song.link})`).join('\n'))
                    .setFooter({ text: 'üéµ Ch·ªçn m·ªôt link ƒë·ªÉ t·∫£i v·ªÅ b·∫±ng l·ªánh /soundcloud download <URL>' });

                await interaction.editReply({ embeds: [embed] });

            } catch (error) {
                console.error(error);
                interaction.editReply('‚ùå C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm b√†i h√°t!');
            }

        } else if (subcommand === 'download') {
            const url = interaction.options.getString('url');
            const downloadApiUrl = `https://api.agatz.xyz/api/soundclouddl?url=${encodeURIComponent(url)}`;

            try {
                const downloadResponse = await axios.get(downloadApiUrl);

                // Ki·ªÉm tra ph·∫£n h·ªìi API c√≥ d·ªØ li·ªáu kh√¥ng
                if (!downloadResponse.data || !downloadResponse.data.data || !downloadResponse.data.data.download) {
                    return interaction.editReply('‚ùå Kh√¥ng th·ªÉ l·∫•y link t·∫£i b√†i h√°t!');
                }

                // L·∫•y d·ªØ li·ªáu b√†i h√°t
                const songTitle = downloadResponse.data.data.title;
                const songDuration = downloadResponse.data.data.duration;
                const songQuality = downloadResponse.data.data.quality;
                const songThumbnail = downloadResponse.data.data.thumbnail;
                const mp3Url = downloadResponse.data.data.download;

                const filePath = path.join(__dirname, 'downloaded.mp3');

                // T·∫£i file MP3
                const mp3Response = await axios.get(mp3Url, { responseType: 'arraybuffer' });
                fs.writeFileSync(filePath, mp3Response.data);

                // T·∫°o attachment ƒë·ªÉ g·ª≠i file nh·∫°c l√™n Discord
                const attachment = new AttachmentBuilder(filePath, { name: `${songTitle}.mp3` });

                // G·ª≠i embed k√®m file
                const embed = new EmbedBuilder()
                    .setColor('#ff5500')
                    .setTitle('üì• T·∫£i xu·ªëng th√†nh c√¥ng!')
                    .setDescription(`**üéµ B√†i H√°t:** ${songTitle}\n‚è≥ **Th·ªùi l∆∞·ª£ng:** ${songDuration}\nüîä **Ch·∫•t l∆∞·ª£ng:** ${songQuality}`)
                    .setThumbnail(songThumbnail)
                    .setFooter({ text: 'üöÄ H√£y th∆∞·ªüng th·ª©c b√†i h√°t c·ªßa b·∫°n!' });

                await interaction.editReply({ embeds: [embed], files: [attachment] });

                // X√≥a file sau khi g·ª≠i ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
                setTimeout(() => {
                    fs.unlink(filePath, (err) => {
                        if (err) console.error('L·ªói khi x√≥a file:', err);
                    });
                }, 5000); // X√≥a sau 5 gi√¢y

            } catch (error) {
                console.error(error);
                interaction.editReply('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫£i b√†i h√°t!');
            }
        }
    }
};

